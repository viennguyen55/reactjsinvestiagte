/**
 * VERY BASIC OF REACTJS
 * Hierarchical design
 * Article list
	Article
	-Title
	-Author
	-Description
	Compose form
 */



/**
 * Class Article
 * @param  {[type]} ) {		return    (			<div />		);	}} [description]
 * @return {[type]}   [description]
 */
var Article = React.createClass({
	
	rawMarkup: function() {
		if (this.props.children === undefined) {
	    	var rawMarkup = "";
	    } else {
	    	var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
	    }
	    return { __html: rawMarkup };
	  },

	render: function() {
		return (
			<div className="article">
				<h2>{this.props.title}</h2>
				<h3>{this.props.author}</h3>
				<p dangerouslySetInnerHTML={this.rawMarkup()}/>
			</div>
		);
	}

});

/**
 * Class ArticleList
 * @param  {[type]} ) {		return    (			<div />		);	}} [description]
 * @return {[type]}   [description]
 */
var ArticleList = React.createClass({

	render: function() {
		var articleNodes = this.props.data.map(function (article) {

			return (
				<Article title={article.title} author={article.author} key={article.id}>
					{article.description}
				</Article>
				);
		});

		return (
			<div className="articleNodes">
				{articleNodes}
			</div>
		);
	}
});

/**
 * Class ArticleBox
 * @param  {[type]} ) {		return    (			<div />		);	}} [description]
 * @return {[type]}   [description]
 */
var ArticleBox = React.createClass({

	getInitialState: function() {
		return {data:[]};
	},

	componentDidMount: function() {
		$.ajax({
			url: this.props.url,
			dataType: 'json',
			cache: false,
			success: function(data) {
				this.setState({data: data});
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url, status, err.toString());
			}.bind(this)
		});
	},

	handleArticleSubmit: function(article) {
	    var articles = this.state.data;
	    // Optimistically set an id on the new article. It will be replaced by an
	    // id generated by the server. In a production application you would likely
	    // not use Date.now() for this and would have a more robust system in place.
	    article.id = Date.now();
	    var newArticles = articles.concat([article]);
	    this.setState({data: newArticles});
		$.ajax({
	      url: this.props.url,
	      dataType: 'json',
	      type: 'POST',
	      data: article,
	      success: function(data) {
	        this.setState({data: data});
	      }.bind(this),
	      error: function(xhr, status, err) {
	      	this.setState({data: articles});
	        console.error(this.props.url, status, err.toString());
	      }.bind(this)
	    });
	},

	render: function() {
		return (
	      <div className="articleBox">
	        <h1>Articles</h1>
	        <ArticleList data={this.state.data}/>
	        <ComposeForm onArticleSubmit={this.handleArticleSubmit}/>
	      </div>
		);
	}

});

/**
 * Add new article form
 * @param  {[type]} ) {		return    (			<div />		);	}} [description]
 * @return {[type]}   [description]
 */
var ComposeForm = React.createClass({
	getInitialState: function() {
	    return {author: '', title: '', description: ''};
	  },
	handleAuthorChange: function(e) {
		this.setState({author: e.target.value});
	},
	handleTitleChange: function(e) {
		this.setState({title: e.target.value});
	},
	handleDescriptionChange: function(e) {
		this.setState({description: e.target.value});
	},
	handleSubmit: function(e) {
	    e.preventDefault();
	    var author = this.state.author.trim();
	    var title = this.state.title.trim();
	    var description = this.state.description.trim();
	    if (!title || !author) {
	      return;
	    }
	    this.props.onArticleSubmit({author: author, title: title, description: description});
	    this.setState({author: '', title: '', description:''});
  	},
	render: function() {
		return (
			<form className="composeForm" onSubmit={this.handleSubmit}>
				<input 
					type="text"
					placeholder="Title"
					onChange={this.handleTitleChange}
					value={this.state.title}/>
				<input
					type="text"
					placeholder="Author"
					onChange={this.handleAuthorChange}
					value={this.state.author}/>
				<textarea
					placeholder="Description"
					onChange={this.handleDescriptionChange}
					value={this.state.description}/>
				<input type="submit" value="Post"/>
			</form>
		);
	}

});


// Render React virtual DOM to HTML DOM
ReactDOM.render(
  <ArticleBox url="/api/articles"/>,
  document.getElementById('content')
);